URLSession을 이용한 HTTP 통신을 알아보기

웹 통신 Protocol
-	인터넷 상에서의 통신을 말한다. 예) 전화 메일 sns 등이 통신을 통해 일어나는 일
-	많은 정보들이 주고 받기에 인터넷에는 엄격한 규약이 존재한다. 이것을 Protocol(통신규약) 엄격한 규약 – 예)수신자와 전달 시간이 정확해야한다.
-	예) 메일을 주고 받을 때 사용하는 SMPProtocol 파일을 전송할 때 사용하는 FTP 프로토콜, 브라우저와 웹서버가 통신하기 위한 HTTP 통신 프로토콜

HTTP
-	Hyper Text Transfer Protocol
-	Hyper Text를 전송하기 위한 프로토콜
-	HTML 문서를 주고받는데에 사용된다. 
-	Http 통신
	요청 request와 응답 response - 클라이언트의 request와 서버의 response로 이루어진다.
	클라이언트는 서버로부터 응답받은 결과를 사용자에게 보여준다.
	서버는 클라이언트의 request에 대한 response를 보낸 후 연결을 종료하기 때문에  HTTP통신은 기본적으로 서버와 클라이언트가 연결되어있지 않다.
	계속 연결되어있지 않다는 것이 HTTP 통신의 특징
 
 
Http 패킷
-	HTTP 통신은 요청을 주고 응답을 받을 때 그 정보를 패킷에 담는다.
-	구성 : Header = 보내고 받는 사람의 주소, 패킷의 생명시간 / Body = 전하고자 하는 내용
-	 

Http Method
-	클라이언트가 서버에게 HTTP 요청을 하려면 URL 주소와 HTTP Method를 정의해주어야 한다.
-	서버에서는 Method의 종류에 따라 어떤 요청인지 파악이 가능하다.
GET	클라이언트가 서버에 리소스를 요청할 때 사용
-일반적으로 정보를 받아올 때 사용
POST	클라이언트가 서버의 리소스를 새로 만들 때 사용
예) 로그인, 게시글 업로드 등 정보를 담아서 보내야할 때 사용
PUT	클라이언트가 서버의 리소스를 전체 수정할 때 사용
예) 회원 정보 전체 수정
PATCH	클라이언트가 서버의 리소스를 일부 수정할 때 사용
예) 회원 정보 일부 수정
DELETE	클라이언트가 서버의 리소스를 삭제할 때 사용
예) 글 삭제
HEAD	클라이언트가 서버의 정상 작동 여부를 확인할 때 사용
OPTIONS	클라이언트가 서버에서 해당 URL이 어떤 메서드를 지원하고
CONNECT	클라이언트가 프록시를 통해 서버와 SSL통신을 하고자 할 때 사용
TRACE	클라이언트와 서버 간의 통신 관리 및 디버깅을 할 때 사용

HTTP Status
-	서버는 응답을 보낼 때 클라이언트에게 해당 요청 처리 상태 코드를 함께 보낸다. 
100번 대	Informational 	요청 정보를 처리 중
요즘은 잘 사용되지 않음
200번 대	Success	요청을 정상적으로 처리함
300번 대	Redirection	요청을 완료하기 위해 추가 동작 필요
브라우저가 자동으로 다른 url로 Redirection되므로 브라우저 상에서는 이 코드가 표시되지는 않지만 이미지 파일처럼 캐싱된 파일을 새로고침 후 확인한다면 300번 대 코드를 확인할 수 있다.
400번 대	Client Error	서버가 요청을 이해하지 못함
주로 클라이언트가 서버에 잘못된 요청을 할 때 발생
500번 대	Server Error	서버가 요청 처리 실패함
대부분의 에러코드는 500 에러로 처리된다.

URLSession
-	Apple에서 HTTP통신을 하기 위해 만든 URLSession과 이 작업을 URLSessionDataTask를 알아보자
-	특정한 url을 이용하여 데이터를 다운로드하고 업로드하기 위한 API이다. 즉 앱에서 서버와 통신하기 위해 사용하는 API
-	앱은 하나이상의 URLSession 인스턴스를 생성하며 각 인스턴스는 관련 데이터 전송작업그룹을 조정한다. 
-	예) 웹브라우저를 만드는 경우, 앱은 탭 또는 창 당 하나의 session을 만들 수 있다.
-	각 session 내에서 앱은 특정 URL에 대한 요청을 나타내는 일련의 작업을 추가한다.
-	URLSession은 request와 response를 기본 구조로 가지고 있는데, request는 서버로 요청을 보낼 때 어떤 HTTP Method를 사용할 것인지 캐싱 정책을 어떻게 할 것인지 등의 설정을 할 수있고, response는 URL 요청에 응답을 나타내는 객체이다.
-	URLSession은 URLSessionConfiguration을 통해 생성할 수 있다. 이렇게 생성된 URLSession을 통해 한 개 이상의 URLSessionTask를 생성할 수 있으며 이 URLSessionTask를 통해 실제 서버와 통신할 수 있다.
-	URLSessionAPI는 여러유형의 session을 제공한다. 타입은 URLSession 객체가 소유한 configuration 프로퍼티 객체에 의해서 결정된다.
-	URLSession의 configuration을 사용하면 타임아웃과 캐싱정책, 추가적인 HTTP Header와 같은 Session 프로퍼티를 구성할 수 있다.
-	URLSession의 종류
	공유 세션 Shared Session – URLSession.shared() 싱클톤으로 사용할 수 있고 기본 요청을 하기위한 Session. 직접 만든 Session만큼 맞춤 설정을 할 수는 없지만 쉽게 만들어 사용할 수 있다. 
	기본 세션 Default Session – URLSession(configuration : .defaut) 공유 세션과 유사하게 작동하지만 직접 원하는 설정을 할 수 있고, 캐시와 쿠키인증 등을 디스크에 저장한다. 또 순차적으로 데이터를 처리하기 위해 델리게이트를 지정할 수 있다. 
	임시 세션 Ephemeral Session : URLSession(configuration : .ephemeral) 공유 세션과 비슷하지만 캐시, 쿠키, 사용자 정보 등을 디스크에 저장하지 않는다. 메모리에 올려서 세션을 연결하고 세션 만료 시 데이터가 사라진다.
	백그라운드 세션 background Session – URLSession(configuration: .background) 앱이 실행되지 않는동안 백그라운드에서 컨텐츠 업로드 및 다운로드를 수행할 수 있다.
-	이렇게 URLSession이 구성되었으면 URLSessionTask를 이용해서 각 Session 내의 작업을 추가할 수 있다. 
-	Task의 종류
	URLSessionDataTask :데이터 객체를 사용해 데이터를 요청하고 응답받는다. 주로 짧고 빈번하게 요청할 때 사용
	URLSessionUploadTask : 데이터 객체 또는 파일 형태의 데이터를 업로드하는 작업을 수행한다. 앱이 실행되지 않았을 때 백그라운드 업로드를 지원한다. 
	URLSessionDownloadTask : 데이터를 다운로드 받아서 파일 형태로 저장하는 작업을 수행한다. 앱이 실행 중이지 않을 때는 백그라운드 다운로드를 지원
	URLSessionStreamTask : TCP/IP 연결을 생성할 때 사용되는 task
	URLSessionWebSocketTask : WebSocket 프로토콜 표준을 통해 통신하는 task

-	URLSession Life Cycle (진행 순서)
	1. Session Configuration을 결정하고, Session을 생성
	2. 통신할 URL과 Request 객체를 생성
	3. 사용할 Task를 결정하고 그에 맞는 Completion Handler나 Delegate 메서드들을 작성
	4. 해당 Task 실행
	5. Task 완료 후 Completion Handler 클로저가 호출됨. 클로저 안에서 작업에 대한 결과 값을 받아올 수 있다.
